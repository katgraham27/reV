# -*- coding: utf-8 -*-
"""
An example single run to get bespoke wind plant layout
"""
import numpy as np
import matplotlib.pyplot as plt
from reV.bespoke.bespoke import BespokeSinglePlant
from reV.bespoke.plotting_functions import plot_poly, plot_turbines,\
    plot_windrose
from reV import TESTDATADIR
from reV.supply_curve.tech_mapping import TechMapping
from rex import Resource

import json
import os
import shutil
import tempfile

from shapely.geometry import Polygon, MultiPolygon, Point
import shapely.geometry

SAM = os.path.join(TESTDATADIR, 'SAM/i_windpower.json')
EXCL = os.path.join(TESTDATADIR, 'ri_exclusions/ri_exclusions.h5')
RES = os.path.join(TESTDATADIR, 'wtk/ri_100_wtk_{}.h5')
TM_DSET = 'techmap_wtk_ri_100'
AGG_DSET = ('cf_mean', 'cf_profile')

# note that this differs from the
EXCL_DICT = {'ri_srtm_slope': {'inclusion_range': (None, 5),
                               'exclude_nodata': False},
             'ri_padus': {'exclude_values': [1],
                          'exclude_nodata': False},
             'ri_reeds_regions': {'inclusion_range': (None, 400),
                                  'exclude_nodata': False}}

with open(SAM, 'r') as f:
    SAM_SYS_INPUTS = json.load(f)

SAM_SYS_INPUTS['wind_farm_wake_model'] = 2
SAM_SYS_INPUTS['wind_farm_losses_percent'] = 0
del SAM_SYS_INPUTS['wind_resource_filename']
TURB_RATING = np.max(SAM_SYS_INPUTS['wind_turbine_powercurve_powerout'])
SAM_CONFIGS = {'default': SAM_SYS_INPUTS}

def windrose(bsp):
    # plot_windrose(wind directions, wind speeds, wind frequencies,ax=None, colors=None )
    # wind directions = np.arange(bsp._wd_bins[0], bsp._wd_bins[1],bsp._wd_bins[2])
    # wd_dist is the join probability distribution between wind speeds and directions ??? and it adds up to 1. 
    # think kat think !! OHHHH i think i get it !!! 
    # wd_bins:
            # wd_bins : tuple
            # 3-entry tuple with (start, stop, step) for the winddirection
            # binning of the wind joint probability distribution. The stop value
            # is inclusive, so ws_bins=(0, 360, 90) would result in four bins
            # with bin edges (0, 90, 180, 270, 360).
    # so this makes sense ^. and they just copy that over as self._wd_bins 
    # similar with _ws_bins
    # np.arange(start, stop, step). 
    ax = plot_windrose(np.arange(bsp._wd_bins[0], bsp._wd_bins[1],
                       bsp._wd_bins[2]),
                       np.arange(bsp._ws_bins[0], bsp._ws_bins[1],
                       bsp._ws_bins[2]),
                       bsp._wind_dist)
    ax.set_title("wind rose")
    

def dom_wind_dir(bsp):
    """plot windrose
    Parameters
    ----------
    wind_directions : 1D array
        wind direction samples
    wind_speeds : 1D array
        wind speed samples
    wind_frequencies : 2D array
        frequency of wind direction and speed samples
        rows = wind speeds, cols = wind dirs
    """
    wind_directions = np.arange(bsp._wd_bins[0], bsp._wd_bins[1],
                       bsp._wd_bins[2])
    wind_speeds = np.arange(bsp._ws_bins[0], bsp._ws_bins[1],
                       bsp._ws_bins[2])
    wind_frequencies = bsp._wind_dist
    print("wind dir shape: ", np.shape(wind_directions))
    print("wind speeds shape: ", np.shape(wind_speeds))
    print("wind freqs shape: ", np.shape(wind_frequencies))
    print("wind dir : ", wind_directions)
    print("wind speeds : ", wind_speeds)
    print("wind freqs : ", wind_frequencies)
    # check to see if each wind direction has the same sample size -- THEY DONT 
    sample_sizes = np.sum(wind_frequencies, axis = 0)
    print("sample sizes: ", sample_sizes)
    # wind_weights = np.zeros((len(wind_speeds),len(wind_directions)))
    # for i in range(len(wind_speeds)):
    #     for j in range(len(wind_directions)):
    #         wind_weights[i,j] = wind_frequencies[i,j]*wind_speeds[i]
    # wind_weights = np.sum(wind_weights, axis = 0)
    # index = np.argmax(wind_weights)
    # dominant_wind_direction = wind_directions[index]

    dominant_wind_direction = wind_directions[np.argmax(sample_sizes)]
    print("dominant_wind_direction in degrees: ", dominant_wind_direction)
    #mean_wind_direction = np.sum(wind_weights*wind_directions)/np.sum(wind_directions)
    mean_wind_direction = np.sum(wind_directions*sample_sizes)/np.sum(sample_sizes)
    # broadcast_wind_directions = np.ones(4,8)*wind_directions 
    # print("broadcast_wind_directions: ", broadcast_wind_directions)
    print("mean_wind_direction: ", mean_wind_direction)
    # NOTE: wind_directions is in degrees**. 
    # NOTE: should i find the mean dominant wind direction, or just the most dominant? 

    
def polynobsp(xlocs, ylocs,poly, title):
    #ax = plot_poly(results["packing_polygons"])
    packing_polygons = poly
    ax = plot_poly(packing_polygons)
    ax = plot_turbines(xlocs,
                       ylocs,
                       50, ax=ax)
    #ax = plot_poly(MultiPolygon(bsp.plant_optimizer.grid_cells))
    # ax.axis("equal")
    # ax.set_title("packed polys, packed points")
    ax.set_title(title)
    # n= len(bsp.plant_optimizer.x_locations)
    # print(title,": ", n)
    # print("x locations: ", bsp.plant_optimizer.x_locations)
    #lot_poly(MultiPolygon(bsp1.plant_optimizer.grid_cells))

# NOTE THE RESULTS WERE NOT PASSED IN IF THIS WAS A FUNCITON, JENK CODE
def poly(bsp, title):
    #ax = plot_poly(results["packing_polygons"])
    packing_polygons = bsp.plant_optimizer.packing_polygons
    ax = plot_poly(packing_polygons)
    ax = plot_turbines(bsp.plant_optimizer.x_locations,
                       bsp.plant_optimizer.y_locations,
                       50, ax=ax)
    ax = plot_turbines(bsp.plant_optimizer.x_locations,
                       bsp.plant_optimizer.y_locations,
                       50, ax=ax)
    #ax = plot_poly(MultiPolygon(bsp.plant_optimizer.grid_cells))
    # ax.axis("equal")
    # ax.set_title("packed polys, packed points")
    ax.set_title(title)
    n= len(bsp.plant_optimizer.x_locations)
    print(title,": ", n)
    #print("x locations: ", bsp.plant_optimizer.x_locations)
    #lot_poly(MultiPolygon(bsp1.plant_optimizer.grid_cells))

def plotdelay2(bsp, xlocs, ylocs):
        #n= len(bsp.plant_optimizer.x_locations)
        n= len(xlocs)
        #print("n, ", n)
        plt.figure() 
        plt.axis("square")
        for i in range(n):
            plt.gca().cla()
            plot_poly(bsp.plant_optimizer.grid_history[i], ax = plt.gca())
            #plot_turbines(bsp.plant_optimizer.turbx_history[i], bsp.plant_optimizer.turby_history[i], 50, ax=plt.gca())
            plot_turbines(xlocs[i], ylocs[i], 50, ax=plt.gca())
            plt.pause(0.7)
            #plt.show() 
        #plt.show()

def plotdelay(bsp):
        n= len(bsp.plant_optimizer.x_locations)
        #print("n, ", n)
        plt.figure() 
        plt.axis("square")
        for i in range(n):
            plt.gca().cla()
            plot_poly(bsp.plant_optimizer.grid_history[i], ax = plt.gca())
            plot_turbines(bsp.plant_optimizer.turbx_history[i], bsp.plant_optimizer.turby_history[i], 50, ax=plt.gca())
            plt.pause(0.7)
            #plt.show() 
        #plt.show()

def turb_compare(bsp1,bsp2):
        n= len(bsp1.plant_optimizer.x_locations)
        packing_polygons = bsp1.plant_optimizer.packing_polygons
        print("n, ", n)
        plt.figure() 
        plt.axis("square")
        #ax = plot_poly(results1["packing_polygons"])
        ax = plot_poly(packing_polygons)
        ax = plot_turbines(bsp1.plant_optimizer.x_locations,
                       bsp1.plant_optimizer.y_locations,
                       50, ax=ax, color = "r")
        ax = plot_turbines(bsp2.plant_optimizer.x_locations,
                       bsp2.plant_optimizer.y_locations,
                       50, ax=ax, color = "b")
        ax.axis("equal")
        ax.set_title("packed polys, packed points")            
        plt.show()

def convert_ang(theta): 
    while (theta > 360): 
        theta = theta - 360
    print("theta: ", theta) 
    theta = 360 - theta + 90
    print ("new theta: ", theta)
    # KATNOTE - i do not know a clear mapping between the clockwise and offset wind angles and a regular angle.
    # but i do know that there are only 8 options for wind angles so i could just hard code those mappings ?

    
# def cost_function(x):
#     """dummy cost function"""
#     R = 0.1
#     return 200 * x * np.exp(-x / 1E5 * R + (1 - R))


# def objective_function(aep, cost):
#     """dummy objective function"""
#     return cost / aep


if __name__ == "__main__":
    # "capital_cost_function": "[2620.120206103421, 2620.120206103421, 2335.702057841464, 2105.8551880984523, 1930.5795968743862, 1809.875284169266, 1742.3234005378288, 1693.967302107118, 1650.3717563372688, 1611.5367632282814, 1577.462322780155, 1548.1484349928905, 1523.5950998664875, 1502.9920635677563, 1483.5906935668038, 1465.1648456823482, 1447.7145199143897, 1431.2397162629281, 1415.740434727964, 1401.2166753094962, 1387.6684380075258, 1375.0518851278619, 1363.0038485015255, 1351.4433385153457, 1340.3703551693225, 1329.7848984634552, 1319.6869683977447, 1310.076564972191, 1300.953688186793, 1292.320199457697, 1284.24138148885, 1276.749605562567, 1269.8448716788482, 1263.5271798376934, 1257.796530039103, 1252.6529222830768, 1248.0963565696145, 1244.1268328987167, 1240.529500602235, 1237.0561372366442, 1233.7064249755117, 1230.480363818838, 1227.3779537666226, 1224.399194818866, 1221.544086975568, 1218.8126302367284, 1216.1953209117833, 1213.6675062162421, 1211.2279188513855, 1208.8765588172134, 1206.613426113726, 1204.438520740923, 1202.3518426988046, 1200.3533919873707, 1198.4390531400081, 1196.5843354805297, 1194.7851907324862, 1193.0416188958764, 1191.3536199707007, 1189.7211939569595, 1188.144340854653, 1186.6230606637803, 1185.157174652137, 1183.7433013098084, 1182.38015516819, 1181.0677362272816, 1179.8060444870832, 1178.5950799475947, 1177.434842608816, 1176.3253324707478, 1175.2665495333893, 1174.2584937967406, 1173.301165260802, 1172.3945639255737, 1171.538689791055, 1170.7159393080258, 1169.9029631287995, 1169.0996485906612, 1168.3059956936106, 1167.5220044376476, 1166.747674822773, 1165.9830068489864, 1165.2280005162877, 1164.4826558246768, 1163.7469727741536, 1163.0209513647187, 1162.3045915963712, 1161.5978934691125, 1160.9008569829407, 1160.2134821378575, 1159.5357689338618, 1158.8677173709543, 1158.209327449135, 1157.560599168403, 1156.9215325287591, 1156.2921275302033, 1155.6723841727353, 1155.0623024563554, 1154.4618823810633, 1153.8711239468591, 1153.2900271537428, 1152.7185920017143, 1152.156818490774, 1151.6046921323045, 1151.0609818073337, 1150.5248985495093, 1149.9964423588317, 1149.4756132353011, 1148.962411178917, 1148.4568361896797, 1147.9588882675896, 1147.4685674126458, 1146.9858736248486, 1146.5108069041983, 1146.0433672506947, 1145.583554664338, 1145.131369145128, 1144.686810693065, 1144.2498793081481, 1143.8205749903784, 1143.3988977397555, 1142.984847556279, 1142.5784244399497, 1142.1796283907665, 1141.7884594087304, 1141.4049174938414, 1141.029002646099, 1140.660714865503, 1140.300054152054, 1139.9470205057517, 1139.6016139265957, 1139.263834414587, 1138.933681969725, 1138.6111565920098, 1138.2962582814412, 1137.9889870380196, 1137.689342861744, 1137.397325752616, 1137.112935710634, 1136.8361727357992, 1136.5670368281114, 1136.30552798757, 1136.0516462141752, 1135.8053915079277, 1135.5667638688262, 1135.3327873292237, 1135.1000772344876, 1134.8686301357836, 1134.6384460331108, 1134.4095249264697, 1134.1818668158603, 1133.9554717012827, 1133.7303395827364, 1133.5064704602219, 1133.2838643337388, 1133.0625212032874, 1132.8424410688676, 1132.6236239304794, 1132.406069788123, 1132.1897786417978, 1131.9747504915044, 1131.7609853372428, 1131.5484831790122, 1131.337244016814, 1131.1272678506468, 1130.9185546805115, 1130.7111045064078, 1130.5049173283355, 1130.299993146295, 1130.0963319602859, 1129.8939337703084, 1129.6927985763627, 1129.4929263784488, 1129.2943171765662, 1129.0969709707151, 1128.9008877608958, 1128.706067547108, 1128.512510329352, 1128.3202161076274, 1128.1291848819344, 1127.939416652273, 1127.7509114186435, 1127.563669181045, 1127.3776899394788, 1127.1929736939433, 1127.0095204444403, 1126.8273301909685, 1126.6464029335284, 1126.4667386721198, 1126.288337406743, 1126.1111991373978, 1125.935323864084, 1125.7607115868018, 1125.5873623055513, 1125.4152760203322, 1125.244452731145, 1125.0748924379893, 1124.9065951408652, 1124.7395608397726, 1124.573789534712, 1124.4092812256822, 1124.2460359126849, 1124.0840535957186, 1123.923334274784, 1123.7638779498811, 1123.60568462101, 1123.4487542881702, 1123.2930869513623, 1123.1386826105856, 1122.9855412658408, 1122.8336629171274, 1122.6830475644456, 1122.5336952077955, 1122.3856058471772, 1122.2387794825904, 1122.093216114035, 1121.9489157415114, 1121.8058783650192, 1121.664103984559, 1121.5235926001299, 1121.3843442117327, 1121.246358819367, 1121.109636423033, 1120.9741770227306, 1120.8399806184598, 1120.7070472102205, 1120.5753767980127, 1120.4449693818365, 1120.3158249616922, 1120.1879435375795, 1120.061325109498, 1119.9359696774484, 1119.8118772414305, 1119.6890478014438, 1119.5674813574892, 1119.4471779095659, 1119.328137457674, 1119.2103600018143, 1119.0938455419857, 1118.978594078189, 1118.8646056104237, 1118.75188013869, 1118.640417662988, 1118.5302181833176, 1118.4212816996785, 1118.3136082120716, 1118.207197720496, 1118.102050224952, 1117.9981657254395, 1117.8955442219587, 1117.7941857145095, 1117.694090203092, 1117.595257687706, 1117.4976881683515, 1117.4013816450286, 1117.3063381177376, 1117.212557586478, 1117.1200400512498, 1117.0287855120534, 1116.9387939688888, 1116.8500654217553, 1116.7625998706537, 1116.676397315584, 1116.5914577565454, 1116.507781193539, 1116.4253676265635, 1116.34421705562, 1116.264329480708, 1116.1857049018276, 1116.1083433189788, 1116.0322447321616, 1115.957409141376, 1115.883836546622, 1115.8115269479, 1115.740480345209, 1115.6706967385499, 1115.6021761279223, 1115.5349185133264, 1115.468923894762, 1115.4041922722292, 1115.340723645728, 1115.2785180152584, 1115.2175753808203, 1115.1578957424142, 1115.0994791000396, 1115.0423254536963, 1114.9864348033848, 1114.9318071491048, 1114.8784424908567, 1114.8263408286398, 1114.7755021624548, 1114.7259264923011, 1114.677613818179, 1114.630564140089, 1114.5847774580302, 1114.540253772003, 1114.4969930820075, 1114.4549953880437, 1114.4142606901114, 1114.3747889882106, 1114.3365802823414][max(0, min(300, n_turbines))] * system_capacity",

    capital_cost_function = """200 * system_capacity * np.exp(-system_capacity /
        1E5 * 0.1 + (1 - 0.1))"""
    objective_function = "capital_cost / aep"
    variable_operating_cost_function = "0.0"
    fixed_operating_cost_function = "0.0"

    output_request = ('system_capacity', 'cf_mean', 'cf_profile')
    gid = 34
    with tempfile.TemporaryDirectory() as td:
        excl_fp = os.path.join(td, 'ri_exclusions.h5')
        res_fp = os.path.join(td, 'ri_100_wtk_{}.h5')
        shutil.copy(EXCL, excl_fp)
        shutil.copy(RES.format(2012), res_fp.format(2012))
        shutil.copy(RES.format(2013), res_fp.format(2013))
        res_fp = res_fp.format('*')

        TechMapping.run(excl_fp, RES.format(2012), dset=TM_DSET, max_workers=1)
        orig_bsp = BespokeSinglePlant(gid, excl_fp, res_fp, TM_DSET,
                                 SAM_SYS_INPUTS,
                                 objective_function, capital_cost_function,
                                 fixed_operating_cost_function,
                                 variable_operating_cost_function,
                                 ga_kwargs={'max_time': 20},
                                 excl_dict=EXCL_DICT,
                                 output_request=output_request
                                 )
        # pj_grid_bsp = BespokeSinglePlant(gid, excl_fp, res_fp, TM_DSET,
        #                          SAM_SYS_INPUTS,
        #                          objective_function, capital_cost_function,
        #                          fixed_operating_cost_function,
        #                          variable_operating_cost_function,
        #                          ga_kwargs={'max_time': 20},
        #                          excl_dict=EXCL_DICT,
        #                          output_request=output_request
        #                          )
        # recurse_bsp = BespokeSinglePlant(gid, excl_fp, res_fp, TM_DSET,
        #                          SAM_SYS_INPUTS,
        #                          objective_function, capital_cost_function,
        #                          fixed_operating_cost_function,
        #                          variable_operating_cost_function,
        #                          ga_kwargs={'max_time': 20},
        #                          excl_dict=EXCL_DICT,
        #                          output_request=output_request
        #                          )

        results1 = orig_bsp.run_plant_optimization()
        # results2 = pj_grid_bsp.run_plant_optimization()
        # results3 = recurse_bsp.run_plant_optimization()
        print("ORIGINAL:::::")
        orig_bsp.plant_optimizer.define_exclusions()
        #packing_polygons = bsp1.plant_optimizer.packing_polygons
        #full_polyons = bsp1.plant_optimizer.full_polygons
        orig_bsp.plant_optimizer.initialize_packing()
        # print("PJ GRID:::")
        # pj_grid_bsp.plant_optimizer.define_exclusions()
        # pj_grid_bsp.plant_optimizer.initialize_packing()
        # print("RECURSE GRID:::")
        # recurse_bsp.plant_optimizer.define_exclusions()
        # recurse_bsp.plant_optimizer.initialize_packing()
        print()
        print(orig_bsp.outputs)
        print()

        print()
        print(orig_bsp.meta.keys())
        print()

        print("AREA" ,orig_bsp.meta.area_sq_km)


        print()
        print(orig_bsp.include_mask)
        print()
    #poly(bsp1)
    #plt.show()
    

    #rotor_diameter = bsp.sam_sys_inputs["wind_turbine_rotor_diameter"]
                    
    windrose(orig_bsp)
    #poly(bsp1, "recursive grid method")
    poly(orig_bsp, "Original Grid Packing Method")
    # poly(pj_grid_bsp, "PJ grid function")
    # poly(recurse_bsp, "Recurse grid function")
    #plotdelay(orig_bsp)
    #plotdelay(bsp1)
    #plt.plot(bsp1.plant_optimizer.grid_cells)
    #plt.show()
    #plt.figure(2)
    #plt.plot(bsp1.plant_optimizer.grid_cells)
    #plt.show()
    # for i in range(len(bsp1.plant_optimizer.grid_cells)):
    #       plot_poly(bsp1.plant_optimizer.grid_cells[i])
    #     print(bsp1.plant_optimizer.grid_cells[i].exterior.coords)
    #     plt.plot(bsp1.plant_optimizer.grid_cells[i].exterior.coords)
    # turb_compare(bsp1,bsp2)
    #plot_poly(MultiPolygon(bsp1.plant_optimizer.grid_cells))
    # xstring = [5567.5,5400.0,4500.0,3600.0,2160.0,2340.0,1955.5057792397972,1080.0,2700.0,2160.0,2520.0,1260.0,1710.0,1980.0,2315.0,4680.0,4860.0,4140.0,4003.5304748217136,3870.0,1980.0,1620.0,1440.0,3150.0,4050.0,2520.0,900.0,734.2691884506854,2520.0,2880.0,5022.710496931029,5220.0,4140.0,3960.0,4320.0,1800.0,2160.0,2160.0,2700.0,2160.0,1839.8228201929414,2135.7321135995526,1710.0,1415.0,1607.5000000000002,1777.1921094013144,1440.0,349.2691884506854,515.0,192.5,695.0,363.24043118398663,810.0,1168.5002477390892,270.0,629.2373375970935,360.0,1530.0,987.7375853361829,1319.7907420642196,718.5002477390892,192.5,1080.0,551.0002477390891,878.566492673405,250.19641710045144,577.7626620347672,192.5,520.0662449343158,900.0,209.2637090388196,1596.1070113394908,900.0,518.2253466924451,192.5,1440.0,1620.0,1063.1955588508552,681.4209055433003,355.69555885085515,1243.1955588508552,861.4209055433003,535.6955588508552,1558.015532334908,1095.3565766546935,192.5,769.6312299622484,1362.553593754747,426.4356711113933,1036.828247062302,693.6326882114467,1235.1450118028642,192.5,4590.0,3510.0,3600.0,3125.0,3215.0,2740.0,4212.882878018978,4468.556825137423,3984.7671006455876,4240.441047764033,4674.099025942556,3237.190668424604,2581.8133429692625,5306.014900366796,4921.114277248826,2927.3730667976233,4445.983248569166,3307.040743131753,3671.7454025689526,5567.5,4692.998499875435,2692.6127279385146,5121.088646162511,3053.349464876721,3416.704077081587,4384.968357974632,5382.573745795716,5490.0,5149.689323164501,4860.0,2831.9426895230445,3195.2973017279105,4551.969858099197,3600.0,4767.418656693492,3321.161920371738,5567.5,4998.174098868311,3044.0645342500484,3527.3536567615643,5348.456561966724,4729.830163307997,3758.550567739785,5130.0,3505.4359309695196,5567.5,2898.9189784215314,5204.55293695054,3254.354909391051,4339.670002041472,3665.368565865052,4015.648446780768,5497.24679048598,2768.470115587376,4519.670002041472,3414.2875442865834,5196.006517795618,2422.047010851236,1996.2549738448129,3050.5312020675833,3764.5674252022995,4845.718114687925,4195.648446780768,5490.0,2704.1080973314433,3341.6255210662302,2258.3019846960487,4521.696559427221,5151.092362292175,3944.567425202299,2995.2024163300903,5567.5,4827.07080703147,2540.363071176256,3597.1665876077655,4270.615537848752,5228.592362292175,4575.989785453002,5556.236308561312,4938.29737661655,5265.941322885687,5567.5,4876.687113547135,2070.0,3250.7434828716255,3914.5731143498156,2831.457390174903,2352.0610864802075,3595.9150261830514,4169.608888463629,3330.0,3850.9508002968655,2643.1554054788544,2953.383575607921,2326.0780353885707]
    # ystring = [5310.0,4963.349176511485,360.0,4680.0,4770.0,4429.670002041473,4410.0,4860.0,2610.0,1980.0,2160.0,2430.0,2610.0,2335.5466579307777,2610.0,2250.0,1909.6700020414721,3420.0,3780.0,3145.5466579307777,450.0,313.5304748217134,3150.0,2520.0,4230.0,3600.0,5220.0,5567.5,5130.0,4993.530474821713,5040.0,5567.5,2610.0,2269.6700020414723,3060.0,5490.0,5353.530474821713,3150.0,3240.0,4083.801893908785,3870.0,3623.7064084975195,3507.5506495968716,5490.0,5156.583264204444,4810.998763026467,4625.188458370713,5567.5,5220.0,5009.7227888941925,4860.0,4664.656969882076,4492.579465020942,4352.221749871273,4291.119708973769,4152.655580277482,3877.4573371901997,4140.0,4012.2978651278127,3817.455744124133,3737.0996220405304,3530.8065137016843,3516.2527874681455,3390.448798552015,3188.154206743275,3150.155836673282,2947.861244864542,2769.5051596448798,2567.21056783614,2737.1807264564,2340.0,2242.2341394289,2160.0,2110.2925523437275,1905.0468754463373,1890.3046181218824,1549.9746201633548,1811.3018155203386,1761.594367864066,1556.3486909666758,1470.971817561811,1421.2643699055384,1216.0186930081481,1170.0,1115.4900630679538,1041.5455700816258,910.2443861705635,838.3101246396601,735.7712632440412,633.06444774227,458.5913248157476,303.07257706375646,429.99695640645655,5567.5,5567.5,5193.167752324692,5567.5,5193.167752324692,5567.5,5490.0,5202.157067692988,5179.860584072323,4892.017651765311,4876.618271428981,4808.810478054615,4749.997587052422,4590.0,4581.310775963172,4580.255399516502,4566.478855501304,4430.202035542259,4301.745402568952,4307.422619119256,4271.171360035495,4275.115599303043,4252.322963188565,4140.610015170718,4013.3403086837748,4040.2130762920733,3969.745582307821,3600.036840364452,3420.0,3924.278746753133,3825.643459981468,3698.373753494525,3693.320463009711,3600.0,3374.2520367002912,3334.5318992953244,3222.9197183834294,3066.0708389884267,3067.2490227057638,2970.0,2906.305659708266,2790.0,2662.1479948271567,2589.287674853329,2372.051607261705,2340.0,2228.142067083011,2211.5768515773507,2080.1936743447163,2070.0,2021.8455463425832,1862.0747075250063,1961.4668200695917,1865.915641109946,1729.6700020414723,1729.9876134255944,1721.7230327290615,1697.9461516088063,1631.557744509279,1603.8763989521437,1570.2167746080174,1524.937365091348,1521.7447095664788,1473.1456641974435,1435.9069094510044,1351.908377440667,1349.5038961180853,1317.0120726163548,1290.4817373169938,1229.88677664949,1183.9388879395274,1096.028542216421,1082.556444842001,1087.4646539602832,1063.947364513022,1025.1541396993657,913.3646153359713,790.6985119250119,711.1957100109217,660.4770351833942,458.3081298583442,218.9649904429942,280.4416395280364,1013.6962551897317,895.9778750118825,846.0577228588819,835.4966324488062,751.6570130319295,630.0,557.6476959003426,351.5874510838955,341.58997304146044,499.68899152045253,271.69437042868265,281.31907837410654]
    # all possible x and y turbine locations of the last one 
    # xstring = [5567.5,5400.0,4500.0,3600.0,2160.0,2340.0,1955.5057792397972,1080.0,2700.0,2160.0,2520.0,1260.0,1710.0,1980.0,2315.0,4680.0,4860.0,4140.0,4003.5304748217136,3870.0,1980.0,1620.0,1440.0,3150.0,4050.0,2520.0,900.0,734.2691884506854,2520.0,2880.0,5022.710496931029,5220.0,4140.0,3960.0,4320.0,1800.0,2160.0,2160.0,2700.0,2160.0,1839.8228201929414,2135.7321135995526,1710.0,1415.0,1607.5000000000002,1777.1921094013144,1440.0,349.2691884506854,515.0,192.5,695.0,363.24043118398663,810.0,1168.5002477390892,270.0,629.2373375970935,360.0,1530.0,987.7375853361829,1319.7907420642196,718.5002477390892,192.5,1080.0,551.0002477390891,878.566492673405,250.19641710045144,577.7626620347672,192.5,520.0662449343158,900.0,209.2637090388196,1596.1070113394908,900.0,518.2253466924451,192.5,1440.0,1620.0,1063.1955588508552,681.4209055433003,355.69555885085515,1243.1955588508552,861.4209055433003,535.6955588508552,1558.015532334908,1095.3565766546935,192.5,769.6312299622484,1362.553593754747,426.4356711113933,1036.828247062302,693.6326882114467,1235.1450118028642,192.5,4590.0,3510.0,3600.0,3125.0,3215.0,2740.0,4212.882878018978,4468.556825137423,3984.7671006455876,4240.441047764033,4674.099025942556,3237.190668424604,2581.8133429692625,5306.014900366796,4921.114277248826,2927.3730667976233,4445.983248569166,3307.040743131753,3671.7454025689526,5567.5,4692.998499875435,2692.6127279385146,5121.088646162511,3053.349464876721,3416.704077081587,4384.968357974632,5382.573745795716,5490.0,5149.689323164501,4860.0,2831.9426895230445,3195.2973017279105,4551.969858099197,3600.0,4767.418656693492,3321.161920371738,5567.5,4998.174098868311,3044.0645342500484,3527.3536567615643,5348.456561966724,4729.830163307997,3758.550567739785,5130.0,3505.4359309695196,5567.5,2898.9189784215314,5204.55293695054,3254.354909391051,4339.670002041472,3665.368565865052,4015.648446780768,5497.24679048598,2768.470115587376,4519.670002041472,3414.2875442865834,5196.006517795618,2422.047010851236,1996.2549738448129,3050.5312020675833,3764.5674252022995,4845.718114687925,4195.648446780768,5490.0,2704.1080973314433,3341.6255210662302,2258.3019846960487,4521.696559427221,5151.092362292175,3944.567425202299,2995.2024163300903,5567.5,4827.07080703147,2540.363071176256,3597.1665876077655,4270.615537848752,5228.592362292175,4575.989785453002,5556.236308561312,4938.29737661655,5265.941322885687,5567.5,4876.687113547135,2070.0,3250.7434828716255,3914.5731143498156,2831.457390174903,2352.0610864802075,3595.9150261830514,4169.608888463629,3330.0,3850.9508002968655,2643.1554054788544,2953.383575607921,2326.0780353885707]
    # ystring = [5310.0,4963.349176511485,360.0,4680.0,4770.0,4429.670002041473,4410.0,4860.0,2610.0,1980.0,2160.0,2430.0,2610.0,2335.5466579307777,2610.0,2250.0,1909.6700020414721,3420.0,3780.0,3145.5466579307777,450.0,313.5304748217134,3150.0,2520.0,4230.0,3600.0,5220.0,5567.5,5130.0,4993.530474821713,5040.0,5567.5,2610.0,2269.6700020414723,3060.0,5490.0,5353.530474821713,3150.0,3240.0,4083.801893908785,3870.0,3623.7064084975195,3507.5506495968716,5490.0,5156.583264204444,4810.998763026467,4625.188458370713,5567.5,5220.0,5009.7227888941925,4860.0,4664.656969882076,4492.579465020942,4352.221749871273,4291.119708973769,4152.655580277482,3877.4573371901997,4140.0,4012.2978651278127,3817.455744124133,3737.0996220405304,3530.8065137016843,3516.2527874681455,3390.448798552015,3188.154206743275,3150.155836673282,2947.861244864542,2769.5051596448798,2567.21056783614,2737.1807264564,2340.0,2242.2341394289,2160.0,2110.2925523437275,1905.0468754463373,1890.3046181218824,1549.9746201633548,1811.3018155203386,1761.594367864066,1556.3486909666758,1470.971817561811,1421.2643699055384,1216.0186930081481,1170.0,1115.4900630679538,1041.5455700816258,910.2443861705635,838.3101246396601,735.7712632440412,633.06444774227,458.5913248157476,303.07257706375646,429.99695640645655,5567.5,5567.5,5193.167752324692,5567.5,5193.167752324692,5567.5,5490.0,5202.157067692988,5179.860584072323,4892.017651765311,4876.618271428981,4808.810478054615,4749.997587052422,4590.0,4581.310775963172,4580.255399516502,4566.478855501304,4430.202035542259,4301.745402568952,4307.422619119256,4271.171360035495,4275.115599303043,4252.322963188565,4140.610015170718,4013.3403086837748,4040.2130762920733,3969.745582307821,3600.036840364452,3420.0,3924.278746753133,3825.643459981468,3698.373753494525,3693.320463009711,3600.0,3374.2520367002912,3334.5318992953244,3222.9197183834294,3066.0708389884267,3067.2490227057638,2970.0,2906.305659708266,2790.0,2662.1479948271567,2589.287674853329,2372.051607261705,2340.0,2228.142067083011,2211.5768515773507,2080.1936743447163,2070.0,2021.8455463425832,1862.0747075250063,1961.4668200695917,1865.915641109946,1729.6700020414723,1729.9876134255944,1721.7230327290615,1697.9461516088063,1631.557744509279,1603.8763989521437,1570.2167746080174,1524.937365091348,1521.7447095664788,1473.1456641974435,1435.9069094510044,1351.908377440667,1349.5038961180853,1317.0120726163548,1290.4817373169938,1229.88677664949,1183.9388879395274,1096.028542216421,1082.556444842001,1087.4646539602832,1063.947364513022,1025.1541396993657,913.3646153359713,790.6985119250119,711.1957100109217,660.4770351833942,458.3081298583442,218.9649904429942,280.4416395280364,1013.6962551897317,895.9778750118825,846.0577228588819,835.4966324488062,751.6570130319295,630.0,557.6476959003426,351.5874510838955,341.58997304146044,499.68899152045253,271.69437042868265,281.31907837410654]

    #plotdelay2(bsp = orig_bsp, xlocs = xstring, ylocs = ystring)
    #polynobsp(xstring, ystring, orig_bsp.plant_optimizer.packing_polygons, "hpc")

    # dom_wind_dir(bsp1)
    # windrose(bsp1)
    plt.show()


    # convert_ang(45)
    # convert_ang(90)
    # convert_ang(180)
    # convert_ang(270)
    # convert_ang(315)


